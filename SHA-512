#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define SHA512_BLOCK_SIZE 128

typedef struct {
    uint64_t length;
    uint64_t state[8];
    uint32_t curlen;
    uint8_t buf[SHA512_BLOCK_SIZE];
} sha512_ctx;

void sha512_transform(sha512_ctx *ctx);
void sha512_init(sha512_ctx *ctx);
void sha512_update(sha512_ctx *ctx, const uint8_t *message, uint32_t len);
void sha512_final(sha512_ctx *ctx, uint8_t *digest);

int main() {
    char input[] = "Hello, World!";
    sha512_ctx ctx;
    uint8_t sha512_hash[64];

    sha512_init(&ctx);
    sha512_update(&ctx, (const uint8_t *)input, strlen(input));
    sha512_final(&ctx, sha512_hash);

    printf("Input String: %s\n", input);
    printf("SHA-512 Hash: ");

    for (int i = 0; i < 64; i++) {
        printf("%02x", sha512_hash[i]);
    }

    printf("\n");

    return 0;
}

#define ROTR64(qword, n) (((qword) >> (n)) | ((qword) << (64 - (n))))

#define CH(x, y, z) (((x) & (y)) ^ (~(x) & (z)))
#define MAJ(x, y, z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))

#define EP0(x) (ROTR64(x, 28) ^ ROTR64(x, 34) ^ ROTR64(x, 39))
#define EP1(x) (ROTR64(x, 14) ^ ROTR64(x, 18) ^ ROTR64(x, 41))

#define SIG0(x) (ROTR64(x, 1) ^ ROTR64(x, 8) ^ ((x) >> 7))
#define SIG1(x) (ROTR64(x, 19) ^ ROTR64(x, 61) ^ ((x) >> 6))

static const uint64_t k[80] = {
    0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL, 0xb5c0fbcfec4d3b2fULL, 0xe9b5dba58189dbbcULL,
    0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL, 0x923f82a4af194f9bULL, 0xab1c5ed5da6d8118ULL,
    0xd807aa98a3030242ULL, 0x12835b0145706fbeULL, 0x243185be4ee4b28cULL, 0x550c7dc3d5ffb4e2ULL,
    // ... (remaining constants are omitted for brevity)
};

void sha512_transform(sha512_ctx *ctx) {
    uint64_t W[80];
    uint64_t a, b, c, d, e, f, g, h, i, j, t1, t2;

    for (i = 0; i < 16; i++) {
        W[i] = ((uint64_t)ctx->buf[i * 8] << 56) |
               ((uint64_t)ctx->buf[i * 8 + 1] << 48) |
               ((uint64_t)ctx->buf[i * 8 + 2] << 40) |
               ((uint64_t)ctx->buf[i * 8 + 3] << 32) |
               ((uint64_t)ctx->buf[i * 8 + 4] << 24) |
               ((uint64_t)ctx->buf[i * 8 + 5] << 16) |
               ((uint64_t)ctx->buf[i * 8 + 6] << 8) |
               ((uint64_t)ctx->buf[i * 8 + 7]);
    }

    for (; i < 80; i++) {
        W[i] = SIG1(W[i - 2]) + W[i - 7] + SIG0(W[i - 15]) + W[i - 16];
    }

    a = ctx->state[0];
    b = ctx->state[1];
    c = ctx->state[2];
    d = ctx->state[3];
    e = ctx->state[4];
    f = ctx->state[5];
    g = ctx->state[6];
    h = ctx->state[7];

    for (i = 0; i < 80; i++) {
        t1 = h + EP1(e) + CH(e, f, g) + k[i] + W[i];
        t2 = EP0(a) + MAJ(a, b, c);
        h = g;
        g = f;
        f = e;
        e = d + t1;
        d = c;
        c = b;
        b = a;
        a = t1 + t2;
    }

    ctx->state[0] += a;
    ctx->state[1] += b;
    ctx->state[2] += c;
    ctx->state[3] += d;
    ctx->state[4] += e;
    ctx->state[5] += f;
    ctx->state[6] += g;
    ctx->state[7] += h;

    ctx->curlen = 0;
}

void sha512_init(sha512_ctx *ctx) {
    ctx->length = 0;
    ctx->state[0] = 0x6a09e667f3bcc908ULL;
    ctx->state[1] = 0xbb67ae8584caa73bULL;
    ctx->state[2] = 0x3c6ef372fe94f82bULL;
    ctx->state[3] = 0xa54ff53a5f1d36f1ULL;
    ctx->state[4] = 0x510e527fade682d1ULL;
    ctx->state[5] = 0x9b05688c2b3e6c1fULL;
    ctx->state[6] = 0x1f83d9abfb41bd6bULL;
    ctx->state[7] = 0x5be0cd19137e2179ULL;
    ctx->curlen = 0;
}

void sha512_update(sha512_ctx *ctx, const uint8_t *message, uint32_t len) {
    uint32_t n;

    if (ctx->curlen > sizeof(ctx->buf)) {
        return;
    }

    while (len > 0) {
        if (ctx->curlen == 0 && len >= SHA512_BLOCK_SIZE) {
            sha512_transform(ctx);
            ctx->length += SHA512_BLOCK_SIZE * 8;
            len -= SHA512_BLOCK_SIZE;
        } else {
            n = (len < (SHA512_BLOCK_SIZE - ctx->curlen)) ? len : (SHA512_BLOCK_SIZE - ctx->curlen);
            memcpy(ctx->buf + ctx->curlen, message, n);
            ctx->curlen += n;
            message += n;
            len -= n;

            if (ctx->curlen == SHA512_BLOCK_SIZE) {
                sha512_transform(ctx);
                ctx->length += 8 * SHA512_BLOCK_SIZE;
                ctx->curlen = 0;
            }
        }
    }
}

void sha512_final(sha512_ctx *ctx, uint8_t *digest) {
    uint32_t i;

    if (ctx->curlen >= sizeof(ctx->buf)) {
        return;
    }

    ctx->length += ctx->curlen * 8;

    ctx->buf[ctx->curlen++] = 0x80;

    if (ctx->curlen > 112) {
        while (ctx->curlen < 128) {
            ctx->buf[ctx->curlen++] = 0;
        }
        sha512_transform(ctx);
    } else {
        while (ctx->curlen < 120) {
            ctx->buf[ctx->curlen++] = 0;
        }
    }

    ctx->buf[120] = (ctx->length >> 56) & 0xff;
    ctx->buf[121] = (ctx->length >> 48) & 0xff;
    ctx->buf[122] = (ctx->length >> 40) & 0xff;
    ctx->buf[123] = (ctx->length >> 32) & 0xff;
    ctx->buf[124] = (ctx->length >> 24) & 0xff;
    ctx->buf[125] = (ctx->length >> 16) & 0xff;
    ctx->buf[126] = (ctx->length >> 8) & 0xff;
    ctx->buf[127] = ctx->length & 0xff;

    sha512_transform(ctx);

    for (i = 0; i < 8; i++) {
        digest[i * 8] = (ctx->state[i] >> 56) & 0xff;
        digest[i * 8 + 1] = (ctx->state[i] >> 48) & 0xff;
        digest[i * 8 + 2] = (ctx->state[i] >> 40) & 0xff;
        digest[i * 8 + 3] = (ctx->state[i] >> 32) & 0xff;
        digest[i * 8 + 4] = (ctx->state[i] >> 24) & 0xff;
        digest[i * 8 + 5] = (ctx->state[i] >> 16) & 0xff;
        digest[i * 8 + 6] = (ctx->state[i] >> 8) & 0xff;
        digest[i * 8 + 7] = ctx->state[i] & 0xff;
    }
}
